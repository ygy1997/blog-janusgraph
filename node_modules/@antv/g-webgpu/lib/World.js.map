{"version":3,"sources":["../src/World.ts"],"names":["World","IDENTIFIER","ConfigService","container","engine","get","RenderEngine","configService","canvas","engineOptions","init","swapChainFormat","WebGPUConstants","TextureFormat","BGRA8Unorm","antialiasing","entity","manager","TransformComponentManager","getComponentByEntity","MeshComponentManager","config","set","Scene","Camera","View","type","renderable","getNamed","Renderable","setConfig","setEntity","params","geometrySystem","Systems","GeometrySystem","createBox","createBufferGeometry","createInstancedBufferGeometry","materialSystem","MaterialSystem","createBasicMaterial","createShaderMaterial","precompiledBundle","kernel","Kernel","setBundle","JSON","parse","renderer","Renderer","systems","getAll","forEach","system","tearDown","destroy","interactor","InteractorService","worldContainer","engineClazz","navigator","gpu","WebGLEngine","WebGPUEngine","isBound","bind","to","inSingletonScope","toSelf","Point","whenTargetNamed","POINT","Line","LINE","world","setContainer"],"mappings":"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","sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport {\n  ComponentManager,\n  createEntity,\n  createWorldContainer,\n  Entity,\n  GeometrySystem,\n  // container,\n  IBoxGeometryParams,\n  IConfig,\n  IConfigService,\n  IDENTIFIER,\n  IInteractorService,\n  IRendererService,\n  ISystem,\n  KernelBundle,\n  MaterialSystem,\n  MeshComponent,\n  TransformComponent,\n} from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { Container, inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Kernel } from './Kernel';\nimport { Line } from './renderable/line/Line';\nimport { Point } from './renderable/point/Point';\nimport { IRenderable, Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\n\n@injectable()\nexport class World {\n  public static create(config: Partial<IConfig> = {}) {\n    const worldContainer = createWorldContainer();\n\n    // bind render engine, fallback to WebGL\n    const engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n    if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n      worldContainer\n        .bind<IRendererService>(IDENTIFIER.RenderEngine)\n        // @ts-ignore\n        .to(engineClazz)\n        .inSingletonScope();\n    }\n\n    worldContainer.bind(Renderer).toSelf();\n    worldContainer.bind(Kernel).toSelf();\n    worldContainer.bind(Renderable).toSelf();\n    worldContainer.bind(View).toSelf();\n    worldContainer.bind(Camera).toSelf();\n    worldContainer.bind(Scene).toSelf();\n    worldContainer.bind(World).toSelf();\n\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Point)\n      .whenTargetNamed(Renderable.POINT);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Line)\n      .whenTargetNamed(Renderable.LINE);\n\n    const world = worldContainer.get(World);\n    world.setContainer(worldContainer);\n    world.setConfig(config);\n    return world;\n  }\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private container: Container;\n\n  public async getEngine() {\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    const { canvas, engineOptions } = this.configService.get();\n    await engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n    return engine;\n  }\n\n  /**\n   * get transform component\n   * @param entity\n   */\n  public getTransformComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<TransformComponent>>(\n      IDENTIFIER.TransformComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public getMeshComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<MeshComponent>>(\n      IDENTIFIER.MeshComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public setConfig(config: Partial<IConfig>) {\n    this.configService.set(config);\n  }\n\n  public setContainer(container: Container) {\n    this.container = container;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public createEntity() {\n    return createEntity();\n  }\n\n  public createScene() {\n    return this.container.get(Scene);\n  }\n\n  public createCamera() {\n    return this.container.get(Camera);\n  }\n\n  public createView() {\n    return this.container.get(View);\n  }\n\n  public createRenderable(entity: Entity, type?: string, config?: unknown) {\n    const renderable: Renderable = type\n      ? this.container.getNamed(IDENTIFIER.Renderable, type)\n      : this.container.get(Renderable);\n    renderable.setConfig(config);\n    renderable.setEntity(entity);\n    return renderable;\n  }\n\n  public createBoxGeometry(params: IBoxGeometryParams) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createBox(params);\n  }\n\n  public createBufferGeometry(params?: { vertexCount: number }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createBufferGeometry(params);\n  }\n\n  public createInstancedBufferGeometry(params: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createInstancedBufferGeometry(params);\n  }\n\n  public createBasicMaterial() {\n    const materialSystem = this.container.getNamed<MaterialSystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.MaterialSystem,\n    );\n    return materialSystem.createBasicMaterial();\n  }\n\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n  }) {\n    const materialSystem = this.container.getNamed<MaterialSystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.MaterialSystem,\n    );\n    return materialSystem.createShaderMaterial(params);\n  }\n\n  public createKernel(precompiledBundle: KernelBundle | string) {\n    const kernel = this.container.get(Kernel);\n    if (typeof precompiledBundle === 'string') {\n      kernel.setBundle(JSON.parse(precompiledBundle));\n    } else {\n      kernel.setBundle(precompiledBundle);\n    }\n    kernel.init();\n    return kernel;\n  }\n\n  public createRenderer() {\n    const renderer = this.container.get(Renderer);\n    renderer.container = this.container;\n    renderer.init();\n    return renderer;\n  }\n\n  public destroy() {\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n    systems.forEach((system) => {\n      if (system.tearDown) {\n        system.tearDown();\n      }\n    });\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    engine.destroy();\n    const interactor = this.container.get<IInteractorService>(\n      IDENTIFIER.InteractorService,\n    );\n    interactor.destroy();\n  }\n}\n"],"file":"World.js"}