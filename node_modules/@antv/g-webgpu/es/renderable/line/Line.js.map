{"version":3,"sources":["../../../src/renderable/line/Line.ts"],"names":["gl","IDENTIFIER","inject","injectable","named","getNormals","Renderable","Line","Systems","MaterialSystem","GeometrySystem","material","materialSystem","createShaderMaterial","vertexShader","lineVert","fragmentShader","lineFrag","setCull","enable","face","BACK","setUniform","u_dash_array","config","dashArray","u_dash_offset","dashOffset","u_dash_ratio","dashRatio","u_thickness","thickness","points","normals","attrIndex","attrPos","attrCounters","vertexCount","length","geometry","geometrySystem","createBufferGeometry","attrNormal","attrMiter","forEach","n","norm","miter","push","setIndex","reduce","prev","cur","setAttribute","Float32Array","from","arrayStride","stepMode","attributes","shaderLocation","offset","format","colors","Array","fill","undefined","map","color","setMaterial","setGeometry"],"mappings":"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","sourcesContent":["import {\n  GeometrySystem,\n  gl,\n  IDENTIFIER,\n  MaterialSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { encodePickingColor } from '../../utils/picking';\nimport getNormals from '../../utils/polyline-normals';\nimport { Renderable } from '../Renderable';\nimport lineFrag from './shaders/webgl.line.frag.glsl';\nimport lineVert from './shaders/webgl.line.vert.glsl';\n\ninterface ILineConfig {\n  id: number;\n  points: number[][];\n  thickness: number;\n  color: [number, number, number, number]; // sRGB\n  opacity: number;\n  dashOffset: number;\n  dashArray: number;\n  dashRatio: number;\n}\n\n@injectable()\nexport class Line extends Renderable<Partial<ILineConfig>> {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.MaterialSystem)\n  private readonly materialSystem: MaterialSystem;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.GeometrySystem)\n  private readonly geometrySystem: GeometrySystem;\n\n  protected afterEntityCreated() {\n    const material = this.materialSystem.createShaderMaterial({\n      vertexShader: lineVert,\n      fragmentShader: lineFrag,\n    });\n\n    material\n      .setCull({\n        enable: false,\n        face: gl.BACK,\n      })\n      .setUniform({\n        u_dash_array: this.config.dashArray || 0.02,\n        u_dash_offset: this.config.dashOffset || 0,\n        u_dash_ratio: this.config.dashRatio || 0,\n        u_thickness: this.config.thickness || 0.02,\n      });\n\n    const { normals, attrIndex, attrPos, attrCounters } = getNormals(\n      this.config.points!,\n      false,\n    );\n    const vertexCount = attrPos.length;\n    const geometry = this.geometrySystem.createBufferGeometry({\n      vertexCount,\n    });\n    const attrNormal: number[][] = [];\n    const attrMiter: number[] = [];\n\n    normals.forEach((n: number[][]) => {\n      const norm = n[0];\n      const miter = n[1];\n      attrNormal.push([norm[0], norm[1]]);\n      // @ts-ignore\n      attrMiter.push(miter);\n    });\n\n    // [[0,1,2], [2,1,3]]\n    geometry.setIndex(\n      attrIndex.reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []),\n    );\n\n    geometry.setAttribute(\n      'a_pos',\n      Float32Array.from(\n        attrPos.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    const colors = new Array(vertexCount)\n      .fill(undefined)\n      .map(() => [...this.config.color!])\n      .reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []);\n    geometry.setAttribute('a_color', Float32Array.from(colors), {\n      arrayStride: 4 * 4,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float4',\n        },\n      ],\n    });\n\n    geometry.setAttribute('a_line_miter', Float32Array.from(attrMiter), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n\n    geometry.setAttribute(\n      'a_line_normal',\n      Float32Array.from(\n        attrNormal.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 3,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute('a_counters', Float32Array.from(attrCounters), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 4,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n\n    this.setMaterial(material);\n    this.setGeometry(geometry);\n  }\n}\n"],"file":"Line.js"}