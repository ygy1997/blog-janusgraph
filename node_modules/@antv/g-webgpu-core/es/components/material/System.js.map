{"version":3,"sources":["../../../src/components/material/System.ts"],"names":["inject","injectable","createEntity","IDENTIFIER","MaterialSystem","MaterialComponentManager","RenderEngine","ShaderModuleService","Promise","all","material","map","entity","component","clear","create","vertexShaderGLSL","engine","supportWebGPU","webgpuVertexShaderGLSL","webglVertexShaderGLSL","fragmentShaderGLSL","webgpuFragmentShaderGLSL","webglFragmentShaderGLSL","params","vertexShader","fragmentShader","uniforms","moduleName","shaderModule","registerModule","vs","fs","materialModule","getModule","Object","keys","uniformName","dirty","name","data"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, Entity, IUniformBinding } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { ISystem } from '../../ISystem';\nimport { IShaderModuleService } from '../../services/shader-module/IShaderModuleService';\nimport { getLengthFromFormat } from '../../utils/shader';\nimport { IModelInitializationOptions } from '../renderer/IModel';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { MaterialComponent } from './MaterialComponent';\nimport webglFragmentShaderGLSL from './shaders/webgl.basic.frag.glsl';\nimport webglVertexShaderGLSL from './shaders/webgl.basic.vert.glsl';\nimport webgpuFragmentShaderGLSL from './shaders/webgpu.basic.frag.glsl';\nimport webgpuVertexShaderGLSL from './shaders/webgpu.basic.vert.glsl';\n\n@injectable()\nexport class MaterialSystem implements ISystem {\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModule: IShaderModuleService;\n\n  public async execute() {\n    await Promise.all(\n      this.material.map(async (entity, component) => {\n        // if (component.dirty) {\n        // TODO: 使用 cache 避免同类材质的重复编译\n        // component.stageDescriptor = await this.engine.compilePipelineStageDescriptor(\n        //   component.vertexShaderGLSL,\n        //   component.fragmentShaderGLSL,\n        //   null,\n        // );\n        // this.generateUniforms(component);\n        //   component.dirty = false;\n        // }\n      }),\n    );\n  }\n\n  public tearDown() {\n    this.material.clear();\n  }\n\n  /**\n   * This material is not affected by lights.\n   * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial\n   */\n  public createBasicMaterial() {\n    const entity = createEntity();\n    return this.material.create(entity, {\n      vertexShaderGLSL: this.engine.supportWebGPU\n        ? webgpuVertexShaderGLSL\n        : webglVertexShaderGLSL,\n      fragmentShaderGLSL: this.engine.supportWebGPU\n        ? webgpuFragmentShaderGLSL\n        : webglFragmentShaderGLSL,\n    });\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial\n   */\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n    cull?: IModelInitializationOptions['cull'];\n    depth?: IModelInitializationOptions['depth'];\n    blend?: IModelInitializationOptions['blend'];\n  }) {\n    const entity = createEntity();\n\n    let vertexShaderGLSL = params.vertexShader;\n    let fragmentShaderGLSL = params.fragmentShader;\n    let uniforms: IUniformBinding[] = [];\n\n    if (!this.engine.supportWebGPU) {\n      const moduleName = `material-${entity}`;\n      this.shaderModule.registerModule(moduleName, {\n        vs: params.vertexShader,\n        fs: params.fragmentShader,\n      });\n\n      const materialModule = this.shaderModule.getModule(moduleName);\n      vertexShaderGLSL = materialModule.vs;\n      fragmentShaderGLSL = materialModule.fs;\n      if (materialModule.uniforms) {\n        // @ts-ignore\n        uniforms = Object.keys(materialModule.uniforms).map((uniformName) => ({\n          dirty: true,\n          name: uniformName,\n          // @ts-ignore\n          data: materialModule.uniforms[uniformName],\n        }));\n      }\n    }\n\n    return this.material.create(entity, {\n      vertexShaderGLSL,\n      fragmentShaderGLSL,\n      ...params,\n      uniforms,\n    });\n  }\n}\n"],"file":"System.js"}