import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { mat4, quat, vec3 } from 'gl-matrix';
import { Component } from '../../ComponentManager';
export var TransformComponent = /*#__PURE__*/function (_Component) {
  _inherits(TransformComponent, _Component);

  var _super = _createSuper(TransformComponent);

  /**
   * local space RTS
   */

  /**
   * XMFLOAT4X4._41
   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmfloat4x4-xmfloat4x4(constfloat)#remarks
   */

  /**
   * world space RTS
   */
  // public position = vec3.fromValues(0, 0, 0);
  // public rotation = quat.fromValues(0, 0, 0, 1);
  // 高阶函数，利用闭包重复利用临时变量
  // @see playcanvas graph node

  /**
   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmquaternionrotationrollpitchyaw
   */

  /**
   * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html
   */

  /**
   * @see https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline
   */
  // public catmullRom = (() => {
  //   const aS = vec3.create();
  //   const aR = quat.create();
  //   const aT = vec3.create();
  //   const bS = vec3.create();
  //   const bR = quat.create();
  //   const bT = vec3.create();
  //   const cS = vec3.create();
  //   const cR = quat.create();
  //   const cT = vec3.create();
  //   const dS = vec3.create();
  //   const dR = quat.create();
  //   const dT = vec3.create();
  //   const R = quat.create();
  //   return (
  //     a: TransformComponent,
  //     b: TransformComponent,
  //     c: TransformComponent,
  //     d: TransformComponent,
  //     t: number,
  //   ) => {
  //     this.setDirty();
  //     mat4.getScaling(aS, a.worldTransform);
  //     mat4.getTranslation(aT, a.worldTransform);
  //     mat4.getRotation(aR, a.worldTransform);
  //     mat4.getScaling(bS, b.worldTransform);
  //     mat4.getTranslation(bT, b.worldTransform);
  //     mat4.getRotation(bR, b.worldTransform);
  //     mat4.getScaling(cS, c.worldTransform);
  //     mat4.getTranslation(cT, c.worldTransform);
  //     mat4.getRotation(cR, c.worldTransform);
  //     mat4.getScaling(dS, d.worldTransform);
  //     mat4.getTranslation(dT, d.worldTransform);
  //     mat4.getRotation(dR, d.worldTransform);
  //     vec3.catmullRom(this.localTranslation, aT, bT, cT, dT, t);
  //     vec3.catmullRom(R, aR, bR, cR, dR, t);
  //     quat.normalize(this.localRotation, R);
  //     vec3.catmullRom(this.localScale, aS, bS, cS, dS, t);
  //   };
  // })();
  function TransformComponent(data) {
    var _this;

    _classCallCheck(this, TransformComponent);

    _this = _super.call(this, data);
    _this.dirtyFlag = void 0;
    _this.localTranslation = vec3.fromValues(0, 0, 0);
    _this.localRotation = quat.fromValues(0, 0, 0, 1);
    _this.localScale = vec3.fromValues(1, 1, 1);
    _this.localTransform = mat4.create();
    _this.worldTransform = mat4.create();

    _this.getRotation = function () {
      var rotation = quat.create();
      return function () {
        mat4.getRotation(rotation, _this.worldTransform);
        return rotation;
      };
    }();

    _this.getScale = function () {
      var scaling = vec3.create();
      return function () {
        mat4.getScaling(scaling, _this.worldTransform);
        return scaling;
      };
    }();

    _this.getPosition = function () {
      var translation = vec3.create();
      return function () {
        mat4.getTranslation(translation, _this.worldTransform);
        return translation;
      };
    }();

    _this.getLocalMatrix = function () {
      var rts = mat4.create();
      return function () {
        mat4.fromRotationTranslationScale(rts, _this.localRotation, _this.localTranslation, _this.localScale);
        return rts;
      };
    }();

    _this.matrixTransform = function () {
      var transformed = mat4.create();
      return function (mat) {
        mat4.multiply(transformed, _this.getLocalMatrix(), mat);
        mat4.getScaling(_this.localScale, transformed);
        mat4.getTranslation(_this.localTranslation, transformed);
        mat4.getRotation(_this.localRotation, transformed);
      };
    }();

    _this.rotateRollPitchYaw = function () {
      var quatX = quat.create();
      var quatY = quat.create();
      var quatZ = quat.create();
      return function (x, y, z) {
        _this.setDirty();

        quat.fromEuler(quatX, x, 0, 0);
        quat.fromEuler(quatY, 0, y, 0);
        quat.fromEuler(quatZ, 0, 0, z);
        quat.multiply(_this.localRotation, quatX, _this.localRotation);
        quat.multiply(_this.localRotation, _this.localRotation, quatY);
        quat.multiply(_this.localRotation, quatZ, _this.localRotation);
        quat.normalize(_this.localRotation, _this.localRotation);
      };
    }();

    _this.lerp = function () {
      var aS = vec3.create();
      var aR = quat.create();
      var aT = vec3.create();
      var bS = vec3.create();
      var bR = quat.create();
      var bT = vec3.create();
      return function (a, b, t) {
        _this.setDirty();

        mat4.getScaling(aS, a.worldTransform);
        mat4.getTranslation(aT, a.worldTransform);
        mat4.getRotation(aR, a.worldTransform);
        mat4.getScaling(bS, b.worldTransform);
        mat4.getTranslation(bT, b.worldTransform);
        mat4.getRotation(bR, b.worldTransform);
        vec3.lerp(_this.localScale, aS, bS, t);
        quat.slerp(_this.localRotation, aR, bR, t);
        vec3.lerp(_this.localTranslation, aT, bT, t);
      };
    }();

    return _this;
  }

  _createClass(TransformComponent, [{
    key: "isDirty",
    value: function isDirty() {
      return this.dirtyFlag;
    }
  }, {
    key: "setDirty",
    value: function setDirty() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (value) {
        this.dirtyFlag |= TransformComponent.DIRTY;
      } else {
        this.dirtyFlag &= ~TransformComponent.DIRTY;
      }
    }
  }, {
    key: "updateTransform",
    value: function updateTransform() {
      if (this.isDirty()) {
        this.setDirty(false);
        mat4.copy(this.worldTransform, this.getLocalMatrix());
      }
    }
  }, {
    key: "updateTransformWithParent",
    value: function updateTransformWithParent(parent) {
      mat4.multiply(this.worldTransform, this.getLocalMatrix(), parent.worldTransform);
    }
  }, {
    key: "applyTransform",
    value: function applyTransform() {
      this.setDirty();
      mat4.getScaling(this.localScale, this.worldTransform);
      mat4.getTranslation(this.localTranslation, this.worldTransform);
      mat4.getRotation(this.localRotation, this.worldTransform);
    }
  }, {
    key: "clearTransform",
    value: function clearTransform() {
      this.setDirty();
      this.localTranslation = vec3.fromValues(0, 0, 0);
      this.localRotation = quat.fromValues(0, 0, 0, 1);
      this.localScale = vec3.fromValues(1, 1, 1);
    }
    /**
     * TODO: 支持以下两种：
     * * translate(x, y, z)
     * * translate(vec3(x, y, z))
     */

  }, {
    key: "translate",
    value: function translate(translation) {
      this.setDirty();
      vec3.add(this.localTranslation, this.localTranslation, translation);
      return this;
    }
  }, {
    key: "scale",
    value: function scale(scaling) {
      this.setDirty();
      vec3.multiply(this.localScale, this.localScale, scaling);
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(quaternion) {
      this.setDirty();
      quat.multiply(this.localRotation, this.localRotation, quaternion);
      quat.normalize(this.localRotation, this.localRotation);
      return this;
    }
  }]);

  return TransformComponent;
}(Component);
TransformComponent.DIRTY = 1 << 0;
//# sourceMappingURL=TransformComponent.js.map