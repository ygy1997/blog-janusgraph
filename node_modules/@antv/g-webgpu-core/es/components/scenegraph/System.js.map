{"version":3,"sources":["../../../src/components/scenegraph/System.ts"],"names":["mat4","inject","injectable","IDENTIFIER","SceneGraphSystem","HierarchyComponentManager","TransformComponentManager","MeshComponentManager","runTransformUpdateSystem","runHierarchyUpdateSystem","hierarchy","clear","transform","forEach","entity","isDirty","mesh","getComponentByEntity","aabbDirty","updateTransform","parentComponent","transformChild","transformParent","parentID","updateTransformWithParent","parent","isChildAlreadyInLocalSpace","contains","detach","create","getCount","i","parentCandidateEntity","getEntity","j","childCandidateEntity","getComponent","moveItem","parentcomponent","matrixTransform","invert","worldTransform","applyTransform","removeKeepSorted"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Entity } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { ISystem } from '../../ISystem';\nimport { MeshComponent } from '../mesh/MeshComponent';\nimport { HierarchyComponent } from './HierarchyComponent';\nimport { TransformComponent } from './TransformComponent';\n\n@injectable()\nexport class SceneGraphSystem implements ISystem {\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  public async execute() {\n    this.runTransformUpdateSystem();\n    this.runHierarchyUpdateSystem();\n  }\n\n  public tearDown() {\n    this.hierarchy.clear();\n    this.transform.clear();\n  }\n\n  public getHierarchyComponentManager() {\n    return this.hierarchy;\n  }\n\n  public getTransformComponentManager() {\n    return this.transform;\n  }\n\n  public runTransformUpdateSystem() {\n    // 原版基于 JobSystem 实现\n    this.transform.forEach((entity, transform) => {\n      if (transform.isDirty()) {\n        // 需要通知 mesh（如果有）更新 aabb\n        const mesh = this.mesh.getComponentByEntity(entity);\n        if (mesh) {\n          mesh.aabbDirty = true;\n        }\n        transform.updateTransform();\n      }\n    });\n  }\n\n  public runHierarchyUpdateSystem() {\n    this.hierarchy.forEach((entity, parentComponent) => {\n      const transformChild = this.transform.getComponentByEntity(entity);\n      const transformParent = this.transform.getComponentByEntity(\n        parentComponent.parentID,\n      );\n      if (transformChild !== null && transformParent !== null) {\n        transformChild.updateTransformWithParent(transformParent);\n      }\n    });\n  }\n\n  public attach(\n    entity: Entity,\n    parent: Entity,\n    isChildAlreadyInLocalSpace?: boolean,\n  ) {\n    if (this.hierarchy.contains(entity)) {\n      this.detach(entity);\n    }\n\n    this.hierarchy.create(entity, {\n      parentID: parent,\n    });\n\n    if (this.hierarchy.getCount() > 1) {\n      for (let i = this.hierarchy.getCount() - 1; i > 0; --i) {\n        const parentCandidateEntity = this.hierarchy.getEntity(i);\n        // const parentCandidateComponent = this.hierarchy.getComponent(i);\n        for (let j = 0; j < i; ++j) {\n          const childCandidateEntity = this.hierarchy.getComponent(j);\n\n          if (childCandidateEntity.parentID === parentCandidateEntity) {\n            this.hierarchy.moveItem(i, j);\n            ++i; // next outer iteration will check the same index again as parent candidate, however things were moved upwards, so it will be a different entity!\n            break;\n          }\n        }\n      }\n    }\n\n    // Re-query parent after potential MoveItem(), because it invalidates references:\n    const parentcomponent = this.hierarchy.getComponentByEntity(entity);\n\n    let transformParent = this.transform.getComponentByEntity(parent);\n    if (transformParent === null) {\n      transformParent = this.transform.create(parent);\n    }\n\n    let transformChild = this.transform.getComponentByEntity(entity);\n    if (transformChild === null) {\n      transformChild = this.transform.create(entity);\n      // after transforms.Create(), transform_parent pointer could have become invalidated!\n      transformParent = this.transform.getComponentByEntity(parent);\n    }\n    if (!isChildAlreadyInLocalSpace && transformParent) {\n      transformChild.matrixTransform(\n        mat4.invert(mat4.create(), transformParent.worldTransform),\n      );\n      transformChild.updateTransform();\n    }\n    if (transformParent) {\n      transformChild.updateTransformWithParent(transformParent);\n    }\n  }\n\n  public detach(entity: Entity) {\n    const parent = this.hierarchy.getComponentByEntity(entity);\n    if (parent !== null) {\n      const transform = this.transform.getComponentByEntity(entity);\n      if (transform !== null) {\n        transform.applyTransform();\n      }\n\n      this.hierarchy.removeKeepSorted(entity);\n    }\n  }\n\n  public detachChildren(parent: Entity) {\n    for (let i = 0; i < this.hierarchy.getCount(); ) {\n      if (this.hierarchy.getComponent(i)?.parentID === parent) {\n        const entity = this.hierarchy.getEntity(i);\n        this.detach(entity);\n      } else {\n        ++i;\n      }\n    }\n  }\n}\n"],"file":"System.js"}