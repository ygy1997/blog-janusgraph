{"version":3,"sources":["../../../../src/components/renderer/passes/RenderPass.ts"],"names":["mat4","inject","injectable","named","IDENTIFIER","gl","RenderPass","MeshComponentManager","GeometryComponentManager","MaterialComponentManager","CullableComponentManager","TransformComponentManager","HierarchyComponentManager","Systems","FrameGraphSystem","RenderEngine","ResourcePool","setup","fg","passNode","pass","output","createRenderTarget","width","height","usage","RENDER_ATTACHMENT","SAMPLED","COPY_SRC","data","write","execute","views","resourceNode","getResourceNode","framebuffer","resourcePool","getOrCreateResource","resource","view","initView","canvas","engine","getCanvas","resize","setScissor","enable","clear","color","getClearColor","depth","useFramebuffer","renderView","scene","getScene","camera","getCamera","viewMatrix","getViewTransform","viewProjectionMatrix","multiply","create","getPerspective","getFrustum","extractFromVPMatrix","getViewport","x","y","viewport","getEntities","meshEntity","renderMesh","mesh","getComponentByEntity","visible","hierarchy","forEach","entity","parentID","material","geometry","dirty","transform","modelViewMatrix","worldTransform","setUniform","projectionMatrix","modelMatrix","cameraPosition","getPosition","u_viewport","model","draw","uniforms","reduce","cur","prev","name","u","forEachAsync","initMesh","createModel","createAttribute","modelInitializationOptions","vs","vertexShaderGLSL","fs","fragmentShaderGLSL","attributes","buffer","arrayStride","stepMode","divisor","scissor","box","cull","blend","indicesBuffer","elements","maxInstancedCount","instances","count","vertexCount"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { Entity } from '../../..';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { GeometryComponent } from '../../geometry/GeometryComponent';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { CullableComponent } from '../../mesh/CullableComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { HierarchyComponent } from '../../scenegraph/HierarchyComponent';\nimport { TransformComponent } from '../../scenegraph/TransformComponent';\nimport { gl } from '../gl';\nimport { IAttribute } from '../IAttribute';\nimport { IModelInitializationOptions } from '../IModel';\nimport { ICamera, IRendererService, IView } from '../IRendererService';\nimport { IUniform } from '../IUniform';\nimport { IRenderPass } from './IRenderPass';\n\nexport interface RenderPassData {\n  output: FrameGraphHandle;\n}\n\n@injectable()\nexport class RenderPass implements IRenderPass<RenderPassData> {\n  public static IDENTIFIER = 'Render Pass';\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.FrameGraphSystem)\n  private readonly frameGraphSystem: FrameGraphSystem;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<RenderPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'color buffer', {\n      width: 1,\n      height: 1,\n      usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<RenderPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    const resourceNode = fg.getResourceNode(pass.data.output);\n    const framebuffer = this.resourcePool.getOrCreateResource(\n      resourceNode.resource,\n    );\n\n    // initialize model of each mesh\n    for (const view of views) {\n      await this.initView(view);\n    }\n\n    const canvas = this.engine.getCanvas();\n    framebuffer.resize({\n      width: canvas.width,\n      height: canvas.height,\n    });\n\n    this.engine.setScissor({\n      enable: false,\n    });\n    this.engine.clear({\n      framebuffer,\n      color: views[0].getClearColor(), // TODO: use clearColor defined in view\n      depth: 1,\n    });\n\n    this.engine.useFramebuffer(framebuffer, () => {\n      for (const view of views) {\n        // must do rendering in a sync way\n        this.renderView(view);\n      }\n    });\n  };\n\n  public renderView(view: IView) {\n    const scene = view.getScene();\n    const camera = view.getCamera();\n\n    // get VP matrix from camera\n    const viewMatrix = camera.getViewTransform()!;\n    const viewProjectionMatrix = mat4.multiply(\n      mat4.create(),\n      camera.getPerspective(),\n      viewMatrix,\n    );\n    // TODO: use cached planes if camera was not changed\n    camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n\n    const { x, y, width, height } = view.getViewport();\n    this.engine.viewport({\n      x,\n      y,\n      width,\n      height,\n    });\n    // this.engine.setScissor({\n    //   enable: true,\n    //   box: { x, y, width, height },\n    // });\n    // this.engine.clear({\n    //   // framebuffer,\n    //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n    //   depth: 1,\n    // });\n\n    for (const meshEntity of scene.getEntities()) {\n      this.renderMesh(meshEntity, {\n        camera,\n        view,\n        viewMatrix,\n      });\n    }\n  }\n\n  private renderMesh(\n    meshEntity: Entity,\n    {\n      camera,\n      view,\n      viewMatrix,\n    }: {\n      camera: ICamera;\n      view: IView;\n      viewMatrix: mat4;\n    },\n  ) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n\n    if (!mesh.visible) {\n      return;\n    }\n\n    // render mesh's children recursively\n    this.hierarchy.forEach((entity, { parentID }) => {\n      if (parentID === meshEntity) {\n        this.renderMesh(entity, { camera, view, viewMatrix });\n      }\n    });\n\n    // filter meshes with frustum culling\n    // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n    //   return;\n    // }\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    // geometry 在自己的 System 中完成脏检查后的更新\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    // get model matrix from mesh\n    const transform = this.transform.getComponentByEntity(meshEntity)!;\n\n    const modelViewMatrix = mat4.multiply(\n      mat4.create(),\n      viewMatrix,\n      transform.worldTransform,\n    );\n    const { width, height } = view.getViewport();\n\n    // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n    material.setUniform({\n      projectionMatrix: camera.getPerspective(),\n      modelViewMatrix,\n      modelMatrix: transform.worldTransform,\n      viewMatrix,\n      cameraPosition: camera.getPosition(),\n      u_viewport: [width, height],\n    });\n\n    if (mesh.model) {\n      mesh.model.draw({\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n      });\n\n      material.uniforms.forEach((u) => {\n        u.dirty = false;\n      });\n      material.dirty = false;\n    }\n  }\n\n  private async initMesh(meshEntity: Entity, view: IView) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    // render mesh's children recursively\n    await this.hierarchy.forEachAsync(async (entity, { parentID }) => {\n      if (parentID === meshEntity) {\n        await this.initMesh(entity, view);\n      }\n    });\n\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    if (!mesh.model) {\n      material.setUniform({\n        projectionMatrix: 1,\n        modelViewMatrix: 1,\n        modelMatrix: 1,\n        viewMatrix: 1,\n        cameraPosition: 1,\n        u_viewport: 1,\n      });\n\n      const { createModel, createAttribute } = this.engine;\n      const modelInitializationOptions: IModelInitializationOptions = {\n        vs: material.vertexShaderGLSL,\n        fs: material.fragmentShaderGLSL,\n        attributes: geometry.attributes.reduce(\n          (cur: { [key: string]: IAttribute }, prev) => {\n            if (prev.data && prev.buffer) {\n              cur[prev.name] = createAttribute({\n                buffer: prev.buffer,\n                attributes: prev.attributes,\n                arrayStride: prev.arrayStride,\n                stepMode: prev.stepMode,\n                divisor: prev.stepMode === 'vertex' ? 0 : 1,\n              });\n            }\n            return cur;\n          },\n          {},\n        ),\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n        // viewport: () => view.getViewport(),\n        scissor: {\n          enable: true,\n          // @ts-ignore\n          box: () => view.getViewport(),\n        },\n      };\n\n      if (material.cull) {\n        modelInitializationOptions.cull = material.cull;\n      }\n      if (material.depth) {\n        modelInitializationOptions.depth = material.depth;\n      }\n      if (material.blend) {\n        modelInitializationOptions.blend = material.blend;\n      }\n\n      if (geometry.indicesBuffer) {\n        modelInitializationOptions.elements = geometry.indicesBuffer;\n      }\n\n      if (geometry.maxInstancedCount) {\n        modelInitializationOptions.instances = geometry.maxInstancedCount;\n        modelInitializationOptions.count = geometry.vertexCount || 3;\n      }\n\n      mesh.model = await createModel(modelInitializationOptions);\n    }\n  }\n\n  private async initView(view: IView) {\n    const scene = view.getScene();\n    for (const meshEntity of scene.getEntities()) {\n      await this.initMesh(meshEntity, view);\n    }\n  }\n}\n"],"file":"RenderPass.js"}