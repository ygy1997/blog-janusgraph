{"version":3,"sources":["../../../src/components/geometry/System.ts"],"names":["vec3","inject","injectable","createEntity","IDENTIFIER","generateAABBFromVertices","gl","primitiveUv1Padding","primitiveUv1PaddingScale","GeometrySystem","GeometryComponentManager","RenderEngine","geometry","forEach","entity","component","dirty","attributes","attribute","data","buffer","engine","createBuffer","type","FLOAT","subData","offset","indices","indicesBuffer","createElements","count","length","UNSIGNED_INT","usage","STATIC_DRAW","_","destroy","clear","vertexCount","create","maxInstancedCount","params","ws","widthSegments","hs","heightSegments","ds","depthSegments","halfExtents","fromValues","hex","hey","hez","corners","faceAxes","faceNormals","sides","FRONT","BACK","TOP","BOTTOM","RIGHT","LEFT","positions","normals","uvs","uvs1","vcounter","generateFace","side","uSegments","vSegments","u","v","i","j","temp1","temp2","temp3","r","lerp","sub","add","push","Math","floor","aabb","Uint32Array","from","name","Float32Array","arrayStride","stepMode","shaderLocation","format"],"mappings":";;;;;;;;;;;AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,WAAnC;AACA,SAASC,YAAT,QAAqC,OAArC;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,wBAAT,QAAyC,kBAAzC;AACA,SAASC,EAAT,QAAmB,gBAAnB;AAMA,IAAMC,mBAAmB,GAAG,MAAM,EAAlC;AACA,IAAMC,wBAAwB,GAAG,MAAMD,mBAAmB,GAAG,CAA7D;AAGA,WAAaE,cAAb,WADCP,UAAU,EACX,UACGD,MAAM,CAACG,UAAU,CAACM,wBAAZ,CADT,UAIGT,MAAM,CAACG,UAAU,CAACO,YAAZ,CAJT;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,qBAAKC,QAAL,CAAcC,OAAd,CAAsB,UAACC,MAAD,EAASC,SAAT,EAAuB;AAC3C;AACA,sBAAIA,SAAS,CAACC,KAAd,EAAqB;AACnBD,oBAAAA,SAAS,CAACE,UAAV,CAAqBJ,OAArB,CAA6B,UAACK,SAAD,EAAe;AAC1C,0BAAIA,SAAS,CAACF,KAAV,IAAmBE,SAAS,CAACC,IAAjC,EAAuC;AACrC,4BAAI,CAACD,SAAS,CAACE,MAAf,EAAuB;AACrBF,0BAAAA,SAAS,CAACE,MAAV,GAAmB,KAAI,CAACC,MAAL,CAAYC,YAAZ,CAAyB;AAC1CH,4BAAAA,IAAI,EAAED,SAAS,CAACC,IAD0B;AAE1CI,4BAAAA,IAAI,EAAEjB,EAAE,CAACkB;AAFiC,2BAAzB,CAAnB;AAID,yBALD,MAKO;AAAA;;AACL,+CAAAN,SAAS,CAACE,MAAV,wEAAkBK,OAAlB,CAA0B;AACxBN,4BAAAA,IAAI,EAAED,SAAS,CAACC,IADQ;AAExB;AACAO,4BAAAA,MAAM,EAAE;AAHgB,2BAA1B;AAKD;;AACDR,wBAAAA,SAAS,CAACF,KAAV,GAAkB,KAAlB;AACD;AACF,qBAhBD,EADmB,CAmBnB;;AACA,wBAAID,SAAS,CAACY,OAAd,EAAuB;AACrB,0BAAI,CAACZ,SAAS,CAACa,aAAf,EAA8B;AAC5Bb,wBAAAA,SAAS,CAACa,aAAV,GAA0B,KAAI,CAACP,MAAL,CAAYQ,cAAZ,CAA2B;AACnDV,0BAAAA,IAAI,EAAEJ,SAAS,CAACY,OADmC;AAEnDG,0BAAAA,KAAK,EAAEf,SAAS,CAACY,OAAV,CAAkBI,MAF0B;AAGnDR,0BAAAA,IAAI,EAAEjB,EAAE,CAAC0B,YAH0C;AAInDC,0BAAAA,KAAK,EAAE3B,EAAE,CAAC4B;AAJyC,yBAA3B,CAA1B;AAMD,uBAPD,MAOO;AACLnB,wBAAAA,SAAS,CAACa,aAAV,CAAwBH,OAAxB,CAAgC;AAC9BN,0BAAAA,IAAI,EAAEJ,SAAS,CAACY,OADc;AAE9BD,0BAAAA,MAAM,EAAE;AAFsB,yBAAhC;AAID;AACF;;AACDX,oBAAAA,SAAS,CAACC,KAAV,GAAkB,KAAlB;AACD;AACF,iBAvCD;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAkDoB;AAChB,WAAKJ,QAAL,CAAcC,OAAd,CAAsB,UAACsB,CAAD,EAAIvB,QAAJ,EAAiB;AACrC,YAAIA,QAAQ,CAACgB,aAAb,EAA4B;AAC1BhB,UAAAA,QAAQ,CAACgB,aAAT,CAAuBQ,OAAvB;AACD;;AAEDxB,QAAAA,QAAQ,CAACK,UAAT,CAAoBJ,OAApB,CAA4B,UAACK,SAAD,EAAe;AACzC,cAAIA,SAAS,CAACE,MAAd,EAAsB;AACpBF,YAAAA,SAAS,CAACE,MAAV,CAAiBgB,OAAjB;AACD;AACF,SAJD;AAKD,OAVD;AAWA,WAAKxB,QAAL,CAAcyB,KAAd;AACD;AAED;AACF;AACA;;AAnEA;AAAA;AAAA,2CAsEI;AAAA,qFAD2C;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAC3C;AAAA,UADEA,WACF,QADEA,WACF;;AACA,UAAMxB,MAAM,GAAGX,YAAY,EAA3B;AACA,aAAO,KAAKS,QAAL,CAAc2B,MAAd,CAAqBzB,MAArB,EAA6B;AAClCwB,QAAAA,WAAW,EAAXA;AADkC,OAA7B,CAAP;AAGD;AAED;AACF;AACA;;AA/EA;AAAA;AAAA,yDAsFK;AAAA,UALDE,iBAKC,SALDA,iBAKC;AAAA,UAJDF,WAIC,SAJDA,WAIC;AACD,UAAMxB,MAAM,GAAGX,YAAY,EAA3B;AACA,aAAO,KAAKS,QAAL,CAAc2B,MAAd,CAAqBzB,MAArB,EAA6B;AAClC0B,QAAAA,iBAAiB,EAAjBA,iBADkC;AAElCF,QAAAA,WAAW,EAAXA;AAFkC,OAA7B,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;;AAlGA;AAAA;AAAA,gCAmG6D;AAAA,UAA1CG,MAA0C,uEAAJ,EAAI;AACzD,UAAMC,EAAE,GAAGD,MAAM,CAACE,aAAP,IAAwB,CAAnC;AACA,UAAMC,EAAE,GAAGH,MAAM,CAACI,cAAP,IAAyB,CAApC;AACA,UAAMC,EAAE,GAAGL,MAAM,CAACM,aAAP,IAAwB,CAAnC;;AAHyD,kBAKvDN,MAAM,CAACO,WAAP,IAAsBhD,IAAI,CAACiD,UAAL,CAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CALiC;AAAA;AAAA,UAIlDC,GAJkD;AAAA,UAI7CC,GAJ6C;AAAA,UAIxCC,GAJwC;;AAOzD,UAAMC,OAAO,GAAG,CACdrD,IAAI,CAACiD,UAAL,CAAgB,CAACC,GAAjB,EAAsB,CAACC,GAAvB,EAA4BC,GAA5B,CADc,EAEdpD,IAAI,CAACiD,UAAL,CAAgBC,GAAhB,EAAqB,CAACC,GAAtB,EAA2BC,GAA3B,CAFc,EAGdpD,IAAI,CAACiD,UAAL,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,GAA1B,CAHc,EAIdpD,IAAI,CAACiD,UAAL,CAAgB,CAACC,GAAjB,EAAsBC,GAAtB,EAA2BC,GAA3B,CAJc,EAKdpD,IAAI,CAACiD,UAAL,CAAgBC,GAAhB,EAAqB,CAACC,GAAtB,EAA2B,CAACC,GAA5B,CALc,EAMdpD,IAAI,CAACiD,UAAL,CAAgB,CAACC,GAAjB,EAAsB,CAACC,GAAvB,EAA4B,CAACC,GAA7B,CANc,EAOdpD,IAAI,CAACiD,UAAL,CAAgB,CAACC,GAAjB,EAAsBC,GAAtB,EAA2B,CAACC,GAA5B,CAPc,EAQdpD,IAAI,CAACiD,UAAL,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B,CAACC,GAA3B,CARc,CAAhB;AAWA,UAAME,QAAQ,GAAG,CACf,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADe,EACJ;AACX,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFe,EAEJ;AACX,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHe,EAGJ;AACX,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJe,EAIJ;AACX,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALe,EAKJ;AACX,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANe,CAMJ;AANI,OAAjB;AASA,UAAMC,WAAW,GAAG,CAClB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADkB,EACP;AACX,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,CAFkB,EAEN;AACZ,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHkB,EAGP;AACX,OAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAJkB,EAIN;AACZ,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALkB,EAKP;AACX,OAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CANkB,CAMN;AANM,OAApB;AASA,UAAMC,KAAK,GAAG;AACZC,QAAAA,KAAK,EAAE,CADK;AAEZC,QAAAA,IAAI,EAAE,CAFM;AAGZC,QAAAA,GAAG,EAAE,CAHO;AAIZC,QAAAA,MAAM,EAAE,CAJI;AAKZC,QAAAA,KAAK,EAAE,CALK;AAMZC,QAAAA,IAAI,EAAE;AANM,OAAd;AASA,UAAMC,SAAmB,GAAG,EAA5B;AACA,UAAMC,OAAiB,GAAG,EAA1B;AACA,UAAMC,GAAa,GAAG,EAAtB;AACA,UAAMC,IAAc,GAAG,EAAvB;AACA,UAAMvC,OAAiB,GAAG,EAA1B;AACA,UAAIwC,QAAQ,GAAG,CAAf;;AAEA,UAAMC,YAAY,GAAG,SAAfA,YAAe,CACnBC,IADmB,EAEnBC,SAFmB,EAGnBC,SAHmB,EAIhB;AACH,YAAIC,CAAJ;AACA,YAAIC,CAAJ;AACA,YAAIC,CAAJ;AACA,YAAIC,CAAJ;;AAEA,aAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAIJ,SAAjB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/B,eAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAIJ,SAAjB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/B,gBAAMC,KAAK,GAAG5E,IAAI,CAACuC,MAAL,EAAd;AACA,gBAAMsC,KAAK,GAAG7E,IAAI,CAACuC,MAAL,EAAd;AACA,gBAAMuC,KAAK,GAAG9E,IAAI,CAACuC,MAAL,EAAd;AACA,gBAAMwC,CAAC,GAAG/E,IAAI,CAACuC,MAAL,EAAV;AACAvC,YAAAA,IAAI,CAACgF,IAAL,CACEJ,KADF,EAEEvB,OAAO,CAACC,QAAQ,CAACe,IAAD,CAAR,CAAe,CAAf,CAAD,CAFT,EAGEhB,OAAO,CAACC,QAAQ,CAACe,IAAD,CAAR,CAAe,CAAf,CAAD,CAHT,EAIEK,CAAC,GAAGJ,SAJN;AAMAtE,YAAAA,IAAI,CAACgF,IAAL,CACEH,KADF,EAEExB,OAAO,CAACC,QAAQ,CAACe,IAAD,CAAR,CAAe,CAAf,CAAD,CAFT,EAGEhB,OAAO,CAACC,QAAQ,CAACe,IAAD,CAAR,CAAe,CAAf,CAAD,CAHT,EAIEM,CAAC,GAAGJ,SAJN;AAMAvE,YAAAA,IAAI,CAACiF,GAAL,CAASH,KAAT,EAAgBD,KAAhB,EAAuBxB,OAAO,CAACC,QAAQ,CAACe,IAAD,CAAR,CAAe,CAAf,CAAD,CAA9B;AACArE,YAAAA,IAAI,CAACkF,GAAL,CAASH,CAAT,EAAYH,KAAZ,EAAmBE,KAAnB;AACAN,YAAAA,CAAC,GAAGE,CAAC,GAAGJ,SAAR;AACAG,YAAAA,CAAC,GAAGE,CAAC,GAAGJ,SAAR;AAEAR,YAAAA,SAAS,CAACoB,IAAV,CAAeJ,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB,EAA2BA,CAAC,CAAC,CAAD,CAA5B;AACAf,YAAAA,OAAO,CAACmB,IAAR,CACE5B,WAAW,CAACc,IAAD,CAAX,CAAkB,CAAlB,CADF,EAEEd,WAAW,CAACc,IAAD,CAAX,CAAkB,CAAlB,CAFF,EAGEd,WAAW,CAACc,IAAD,CAAX,CAAkB,CAAlB,CAHF;AAKAJ,YAAAA,GAAG,CAACkB,IAAJ,CAASX,CAAT,EAAYC,CAAZ,EA5B+B,CA6B/B;AACA;AACA;;AACAD,YAAAA,CAAC,IAAI,CAAL;AACAC,YAAAA,CAAC,IAAI,CAAL;AACAD,YAAAA,CAAC,GAAGA,CAAC,GAAGhE,wBAAJ,GAA+BD,mBAAnC;AACAkE,YAAAA,CAAC,GAAGA,CAAC,GAAGjE,wBAAJ,GAA+BD,mBAAnC;AACAiE,YAAAA,CAAC,IAAKH,IAAI,GAAG,CAAR,GAAa,CAAlB;AACAI,YAAAA,CAAC,IAAIW,IAAI,CAACC,KAAL,CAAWhB,IAAI,GAAG,CAAlB,IAAuB,CAA5B;AACAH,YAAAA,IAAI,CAACiB,IAAL,CAAUX,CAAV,EAAaC,CAAb;;AAEA,gBAAIC,CAAC,GAAGJ,SAAJ,IAAiBK,CAAC,GAAGJ,SAAzB,EAAoC;AAClC5C,cAAAA,OAAO,CAACwD,IAAR,CAAahB,QAAQ,GAAGI,SAAX,GAAuB,CAApC,EAAuCJ,QAAQ,GAAG,CAAlD,EAAqDA,QAArD;AACAxC,cAAAA,OAAO,CAACwD,IAAR,CACEhB,QAAQ,GAAGI,SAAX,GAAuB,CADzB,EAEEJ,QAAQ,GAAGI,SAAX,GAAuB,CAFzB,EAGEJ,QAAQ,GAAG,CAHb;AAKD;;AAEDA,YAAAA,QAAQ;AACT;AACF;AACF,OA/DD;;AAiEAC,MAAAA,YAAY,CAACZ,KAAK,CAACC,KAAP,EAAcf,EAAd,EAAkBE,EAAlB,CAAZ;AACAwB,MAAAA,YAAY,CAACZ,KAAK,CAACE,IAAP,EAAahB,EAAb,EAAiBE,EAAjB,CAAZ;AACAwB,MAAAA,YAAY,CAACZ,KAAK,CAACG,GAAP,EAAYjB,EAAZ,EAAgBI,EAAhB,CAAZ;AACAsB,MAAAA,YAAY,CAACZ,KAAK,CAACI,MAAP,EAAelB,EAAf,EAAmBI,EAAnB,CAAZ;AACAsB,MAAAA,YAAY,CAACZ,KAAK,CAACK,KAAP,EAAcf,EAAd,EAAkBF,EAAlB,CAAZ;AACAwB,MAAAA,YAAY,CAACZ,KAAK,CAACM,IAAP,EAAahB,EAAb,EAAiBF,EAAjB,CAAZ,CA1HyD,CA4HzD;;AACA,UAAM0C,IAAI,GAAGjF,wBAAwB,CAAC0D,SAAD,CAArC;AAEA,UAAMjD,MAAM,GAAGX,YAAY,EAA3B;AACA,aAAO,KAAKS,QAAL,CAAc2B,MAAd,CAAqBzB,MAArB,EAA6B;AAClCa,QAAAA,OAAO,EAAE4D,WAAW,CAACC,IAAZ,CAAiB7D,OAAjB,CADyB;AAElC2D,QAAAA,IAAI,EAAJA,IAFkC;AAGlCrE,QAAAA,UAAU,EAAE,CACV;AACED,UAAAA,KAAK,EAAE,IADT;AAEEyE,UAAAA,IAAI,EAAE,UAFR;AAGEtE,UAAAA,IAAI,EAAEuE,YAAY,CAACF,IAAb,CAAkBzB,SAAlB,CAHR;AAIE4B,UAAAA,WAAW,EAAE,IAAI,CAJnB;AAKEC,UAAAA,QAAQ,EAAE,QALZ;AAME3E,UAAAA,UAAU,EAAE,CACV;AACE4E,YAAAA,cAAc,EAAE,CADlB;AAEEnE,YAAAA,MAAM,EAAE,CAFV;AAGEoE,YAAAA,MAAM,EAAE;AAHV,WADU;AANd,SADU,CAeV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CU;AAHsB,OAA7B,CAAP,CAhIyD,CAiLzD;AACD;AArRH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, Entity } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { ISystem } from '../../ISystem';\nimport { generateAABBFromVertices } from '../../utils/aabb';\nimport { gl } from '../renderer/gl';\nimport { IBuffer } from '../renderer/IBuffer';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { GeometryComponent } from './GeometryComponent';\nimport { IBoxGeometryParams } from './interface';\n\nconst primitiveUv1Padding = 4.0 / 64;\nconst primitiveUv1PaddingScale = 1.0 - primitiveUv1Padding * 2;\n\n@injectable()\nexport class GeometrySystem implements ISystem {\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute() {\n    this.geometry.forEach((entity, component) => {\n      // build buffers for each geometry\n      if (component.dirty) {\n        component.attributes.forEach((attribute) => {\n          if (attribute.dirty && attribute.data) {\n            if (!attribute.buffer) {\n              attribute.buffer = this.engine.createBuffer({\n                data: attribute.data,\n                type: gl.FLOAT,\n              });\n            } else {\n              attribute.buffer?.subData({\n                data: attribute.data,\n                // TODO: support offset in subdata\n                offset: 0,\n              });\n            }\n            attribute.dirty = false;\n          }\n        });\n\n        // create index buffer if needed\n        if (component.indices) {\n          if (!component.indicesBuffer) {\n            component.indicesBuffer = this.engine.createElements({\n              data: component.indices,\n              count: component.indices.length,\n              type: gl.UNSIGNED_INT,\n              usage: gl.STATIC_DRAW,\n            });\n          } else {\n            component.indicesBuffer.subData({\n              data: component.indices,\n              offset: 0,\n            });\n          }\n        }\n        component.dirty = false;\n      }\n    });\n  }\n\n  public tearDown() {\n    this.geometry.forEach((_, geometry) => {\n      if (geometry.indicesBuffer) {\n        geometry.indicesBuffer.destroy();\n      }\n\n      geometry.attributes.forEach((attribute) => {\n        if (attribute.buffer) {\n          attribute.buffer.destroy();\n        }\n      });\n    });\n    this.geometry.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/BufferGeometry\n   */\n  public createBufferGeometry(\n    { vertexCount }: { vertexCount: number } = { vertexCount: 3 },\n  ) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      vertexCount,\n    });\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/InstancedBufferGeometry\n   */\n  public createInstancedBufferGeometry({\n    maxInstancedCount,\n    vertexCount,\n  }: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      maxInstancedCount,\n      vertexCount,\n    });\n  }\n\n  /**\n   * ported from PlayCanvas\n   * @param params BoxGeometryParams\n   * @return entity\n   */\n  public createBox(params: Partial<IBoxGeometryParams> = {}) {\n    const ws = params.widthSegments || 1;\n    const hs = params.heightSegments || 1;\n    const ds = params.depthSegments || 1;\n    const [hex, hey, hez] =\n      params.halfExtents || vec3.fromValues(0.5, 0.5, 0.5);\n\n    const corners = [\n      vec3.fromValues(-hex, -hey, hez),\n      vec3.fromValues(hex, -hey, hez),\n      vec3.fromValues(hex, hey, hez),\n      vec3.fromValues(-hex, hey, hez),\n      vec3.fromValues(hex, -hey, -hez),\n      vec3.fromValues(-hex, -hey, -hez),\n      vec3.fromValues(-hex, hey, -hez),\n      vec3.fromValues(hex, hey, -hez),\n    ];\n\n    const faceAxes = [\n      [0, 1, 3], // FRONT\n      [4, 5, 7], // BACK\n      [3, 2, 6], // TOP\n      [1, 0, 4], // BOTTOM\n      [1, 4, 2], // RIGHT\n      [5, 0, 6], // LEFT\n    ];\n\n    const faceNormals = [\n      [0, 0, 1], // FRONT\n      [0, 0, -1], // BACK\n      [0, 1, 0], // TOP\n      [0, -1, 0], // BOTTOM\n      [1, 0, 0], // RIGHT\n      [-1, 0, 0], // LEFT\n    ];\n\n    const sides = {\n      FRONT: 0,\n      BACK: 1,\n      TOP: 2,\n      BOTTOM: 3,\n      RIGHT: 4,\n      LEFT: 5,\n    };\n\n    const positions: number[] = [];\n    const normals: number[] = [];\n    const uvs: number[] = [];\n    const uvs1: number[] = [];\n    const indices: number[] = [];\n    let vcounter = 0;\n\n    const generateFace = (\n      side: number,\n      uSegments: number,\n      vSegments: number,\n    ) => {\n      let u;\n      let v;\n      let i;\n      let j;\n\n      for (i = 0; i <= uSegments; i++) {\n        for (j = 0; j <= vSegments; j++) {\n          const temp1 = vec3.create();\n          const temp2 = vec3.create();\n          const temp3 = vec3.create();\n          const r = vec3.create();\n          vec3.lerp(\n            temp1,\n            corners[faceAxes[side][0]],\n            corners[faceAxes[side][1]],\n            i / uSegments,\n          );\n          vec3.lerp(\n            temp2,\n            corners[faceAxes[side][0]],\n            corners[faceAxes[side][2]],\n            j / vSegments,\n          );\n          vec3.sub(temp3, temp2, corners[faceAxes[side][0]]);\n          vec3.add(r, temp1, temp3);\n          u = i / uSegments;\n          v = j / vSegments;\n\n          positions.push(r[0], r[1], r[2]);\n          normals.push(\n            faceNormals[side][0],\n            faceNormals[side][1],\n            faceNormals[side][2],\n          );\n          uvs.push(u, v);\n          // pack as 3x2\n          // 1/3 will be empty, but it's either that or stretched pixels\n          // TODO: generate non-rectangular lightMaps, so we could use space without stretching\n          u /= 3;\n          v /= 3;\n          u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n          v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n          u += (side % 3) / 3;\n          v += Math.floor(side / 3) / 3;\n          uvs1.push(u, v);\n\n          if (i < uSegments && j < vSegments) {\n            indices.push(vcounter + vSegments + 1, vcounter + 1, vcounter);\n            indices.push(\n              vcounter + vSegments + 1,\n              vcounter + vSegments + 2,\n              vcounter + 1,\n            );\n          }\n\n          vcounter++;\n        }\n      }\n    };\n\n    generateFace(sides.FRONT, ws, hs);\n    generateFace(sides.BACK, ws, hs);\n    generateFace(sides.TOP, ws, ds);\n    generateFace(sides.BOTTOM, ws, ds);\n    generateFace(sides.RIGHT, ds, hs);\n    generateFace(sides.LEFT, ds, hs);\n\n    // generate AABB\n    const aabb = generateAABBFromVertices(positions);\n\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      indices: Uint32Array.from(indices),\n      aabb,\n      attributes: [\n        {\n          dirty: true,\n          name: 'position',\n          data: Float32Array.from(positions),\n          arrayStride: 4 * 3,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float3',\n            },\n          ],\n        },\n        // {\n        //   dirty: true,\n        //   name: 'normal',\n        //   data: Float32Array.from(normals),\n        //   arrayStride: 4 * 3,\n        //   stepMode: 'vertex',\n        //   attributes: [\n        //     {\n        //       shaderLocation: 1,\n        //       offset: 0,\n        //       format: 'float3',\n        //     },\n        //   ],\n        // },\n        // {\n        //   dirty: true,\n        //   name: 'uv',\n        //   data: Float32Array.from(uvs),\n        //   arrayStride: 4 * 2,\n        //   stepMode: 'vertex',\n        //   attributes: [\n        //     {\n        //       shaderLocation: 2,\n        //       offset: 0,\n        //       format: 'float2',\n        //     },\n        //   ],\n        // },\n      ],\n    });\n\n    // TODO: barycentric & tangent\n  }\n}\n"],"file":"System.js"}