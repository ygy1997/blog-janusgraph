{"version":3,"sources":["../../../src/components/scenegraph/TransformComponent.ts"],"names":["TransformComponent","data","dirtyFlag","localTranslation","vec3","fromValues","localRotation","quat","localScale","localTransform","mat4","create","worldTransform","getRotation","rotation","getScale","scaling","getScaling","getPosition","translation","getTranslation","getLocalMatrix","rts","fromRotationTranslationScale","matrixTransform","transformed","mat","multiply","rotateRollPitchYaw","quatX","quatY","quatZ","x","y","z","setDirty","fromEuler","normalize","lerp","aS","aR","aT","bS","bR","bT","a","b","t","slerp","value","DIRTY","isDirty","copy","parent","add","quaternion","Component"],"mappings":"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","sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\nimport { Component, NonFunctionProperties } from '../../ComponentManager';\n\nexport class TransformComponent extends Component<TransformComponent> {\n  public static DIRTY = 1 << 0;\n\n  public dirtyFlag: number;\n\n  /**\n   * local space RTS\n   */\n\n  /**\n   * XMFLOAT4X4._41\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmfloat4x4-xmfloat4x4(constfloat)#remarks\n   */\n  public localTranslation = vec3.fromValues(0, 0, 0);\n  public localRotation = quat.fromValues(0, 0, 0, 1);\n  public localScale = vec3.fromValues(1, 1, 1);\n  public localTransform = mat4.create();\n\n  /**\n   * world space RTS\n   */\n\n  // public position = vec3.fromValues(0, 0, 0);\n  // public rotation = quat.fromValues(0, 0, 0, 1);\n  public worldTransform = mat4.create();\n\n  // 高阶函数，利用闭包重复利用临时变量\n  // @see playcanvas graph node\n  public getRotation = (() => {\n    const rotation = quat.create();\n    return () => {\n      mat4.getRotation(rotation, this.worldTransform);\n      return rotation;\n    };\n  })();\n\n  public getScale = (() => {\n    const scaling = vec3.create();\n    return () => {\n      mat4.getScaling(scaling, this.worldTransform);\n      return scaling;\n    };\n  })();\n\n  public getPosition = (() => {\n    const translation = vec3.create();\n    return () => {\n      mat4.getTranslation(translation, this.worldTransform);\n      return translation;\n    };\n  })();\n\n  public getLocalMatrix = (() => {\n    const rts = mat4.create();\n    return () => {\n      mat4.fromRotationTranslationScale(\n        rts,\n        this.localRotation,\n        this.localTranslation,\n        this.localScale,\n      );\n      return rts;\n    };\n  })();\n\n  public matrixTransform = (() => {\n    const transformed = mat4.create();\n    return (mat: mat4) => {\n      mat4.multiply(transformed, this.getLocalMatrix(), mat);\n      mat4.getScaling(this.localScale, transformed);\n      mat4.getTranslation(this.localTranslation, transformed);\n      mat4.getRotation(this.localRotation, transformed);\n    };\n  })();\n\n  /**\n   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmquaternionrotationrollpitchyaw\n   */\n  public rotateRollPitchYaw = (() => {\n    const quatX = quat.create();\n    const quatY = quat.create();\n    const quatZ = quat.create();\n    return (x: number, y: number, z: number) => {\n      this.setDirty();\n\n      quat.fromEuler(quatX, x, 0, 0);\n      quat.fromEuler(quatY, 0, y, 0);\n      quat.fromEuler(quatZ, 0, 0, z);\n\n      quat.multiply(this.localRotation, quatX, this.localRotation);\n      quat.multiply(this.localRotation, this.localRotation, quatY);\n      quat.multiply(this.localRotation, quatZ, this.localRotation);\n      quat.normalize(this.localRotation, this.localRotation);\n    };\n  })();\n\n  /**\n   * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html\n   */\n  public lerp = (() => {\n    const aS = vec3.create();\n    const aR = quat.create();\n    const aT = vec3.create();\n    const bS = vec3.create();\n    const bR = quat.create();\n    const bT = vec3.create();\n    return (a: TransformComponent, b: TransformComponent, t: number) => {\n      this.setDirty();\n\n      mat4.getScaling(aS, a.worldTransform);\n      mat4.getTranslation(aT, a.worldTransform);\n      mat4.getRotation(aR, a.worldTransform);\n      mat4.getScaling(bS, b.worldTransform);\n      mat4.getTranslation(bT, b.worldTransform);\n      mat4.getRotation(bR, b.worldTransform);\n\n      vec3.lerp(this.localScale, aS, bS, t);\n      quat.slerp(this.localRotation, aR, bR, t);\n      vec3.lerp(this.localTranslation, aT, bT, t);\n    };\n  })();\n\n  /**\n   * @see https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n   */\n  // public catmullRom = (() => {\n  //   const aS = vec3.create();\n  //   const aR = quat.create();\n  //   const aT = vec3.create();\n  //   const bS = vec3.create();\n  //   const bR = quat.create();\n  //   const bT = vec3.create();\n  //   const cS = vec3.create();\n  //   const cR = quat.create();\n  //   const cT = vec3.create();\n  //   const dS = vec3.create();\n  //   const dR = quat.create();\n  //   const dT = vec3.create();\n  //   const R = quat.create();\n  //   return (\n  //     a: TransformComponent,\n  //     b: TransformComponent,\n  //     c: TransformComponent,\n  //     d: TransformComponent,\n  //     t: number,\n  //   ) => {\n  //     this.setDirty();\n  //     mat4.getScaling(aS, a.worldTransform);\n  //     mat4.getTranslation(aT, a.worldTransform);\n  //     mat4.getRotation(aR, a.worldTransform);\n  //     mat4.getScaling(bS, b.worldTransform);\n  //     mat4.getTranslation(bT, b.worldTransform);\n  //     mat4.getRotation(bR, b.worldTransform);\n  //     mat4.getScaling(cS, c.worldTransform);\n  //     mat4.getTranslation(cT, c.worldTransform);\n  //     mat4.getRotation(cR, c.worldTransform);\n  //     mat4.getScaling(dS, d.worldTransform);\n  //     mat4.getTranslation(dT, d.worldTransform);\n  //     mat4.getRotation(dR, d.worldTransform);\n\n  //     vec3.catmullRom(this.localTranslation, aT, bT, cT, dT, t);\n  //     vec3.catmullRom(R, aR, bR, cR, dR, t);\n  //     quat.normalize(this.localRotation, R);\n  //     vec3.catmullRom(this.localScale, aS, bS, cS, dS, t);\n  //   };\n  // })();\n\n  constructor(data?: Partial<NonFunctionProperties<TransformComponent>>) {\n    super(data);\n  }\n\n  public isDirty() {\n    return this.dirtyFlag;\n  }\n\n  public setDirty(value = true) {\n    if (value) {\n      this.dirtyFlag |= TransformComponent.DIRTY;\n    } else {\n      this.dirtyFlag &= ~TransformComponent.DIRTY;\n    }\n  }\n\n  public updateTransform() {\n    if (this.isDirty()) {\n      this.setDirty(false);\n      mat4.copy(this.worldTransform, this.getLocalMatrix());\n    }\n  }\n\n  public updateTransformWithParent(parent: TransformComponent) {\n    mat4.multiply(\n      this.worldTransform,\n      this.getLocalMatrix(),\n      parent.worldTransform,\n    );\n  }\n\n  public applyTransform() {\n    this.setDirty();\n\n    mat4.getScaling(this.localScale, this.worldTransform);\n    mat4.getTranslation(this.localTranslation, this.worldTransform);\n    mat4.getRotation(this.localRotation, this.worldTransform);\n  }\n\n  public clearTransform() {\n    this.setDirty();\n    this.localTranslation = vec3.fromValues(0, 0, 0);\n    this.localRotation = quat.fromValues(0, 0, 0, 1);\n    this.localScale = vec3.fromValues(1, 1, 1);\n  }\n\n  /**\n   * TODO: 支持以下两种：\n   * * translate(x, y, z)\n   * * translate(vec3(x, y, z))\n   */\n  public translate(translation: vec3) {\n    this.setDirty();\n    vec3.add(this.localTranslation, this.localTranslation, translation);\n    return this;\n  }\n\n  public scale(scaling: vec3) {\n    this.setDirty();\n    vec3.multiply(this.localScale, this.localScale, scaling);\n    return this;\n  }\n\n  public rotate(quaternion: quat) {\n    this.setDirty();\n    quat.multiply(this.localRotation, this.localRotation, quaternion);\n    quat.normalize(this.localRotation, this.localRotation);\n    return this;\n  }\n}\n"],"file":"TransformComponent.js"}