"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransformComponent = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _glMatrix = require("gl-matrix");

var _ComponentManager = require("../../ComponentManager");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var TransformComponent = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(TransformComponent, _Component);

  var _super = _createSuper(TransformComponent);

  /**
   * local space RTS
   */

  /**
   * XMFLOAT4X4._41
   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmfloat4x4-xmfloat4x4(constfloat)#remarks
   */

  /**
   * world space RTS
   */
  // public position = vec3.fromValues(0, 0, 0);
  // public rotation = quat.fromValues(0, 0, 0, 1);
  // 高阶函数，利用闭包重复利用临时变量
  // @see playcanvas graph node

  /**
   * @see https://docs.microsoft.com/en-us/windows/win32/api/directxmath/nf-directxmath-xmquaternionrotationrollpitchyaw
   */

  /**
   * @see https://xiaoiver.github.io/coding/2018/12/28/Camera-%E8%AE%BE%E8%AE%A1-%E4%B8%80.html
   */

  /**
   * @see https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline
   */
  // public catmullRom = (() => {
  //   const aS = vec3.create();
  //   const aR = quat.create();
  //   const aT = vec3.create();
  //   const bS = vec3.create();
  //   const bR = quat.create();
  //   const bT = vec3.create();
  //   const cS = vec3.create();
  //   const cR = quat.create();
  //   const cT = vec3.create();
  //   const dS = vec3.create();
  //   const dR = quat.create();
  //   const dT = vec3.create();
  //   const R = quat.create();
  //   return (
  //     a: TransformComponent,
  //     b: TransformComponent,
  //     c: TransformComponent,
  //     d: TransformComponent,
  //     t: number,
  //   ) => {
  //     this.setDirty();
  //     mat4.getScaling(aS, a.worldTransform);
  //     mat4.getTranslation(aT, a.worldTransform);
  //     mat4.getRotation(aR, a.worldTransform);
  //     mat4.getScaling(bS, b.worldTransform);
  //     mat4.getTranslation(bT, b.worldTransform);
  //     mat4.getRotation(bR, b.worldTransform);
  //     mat4.getScaling(cS, c.worldTransform);
  //     mat4.getTranslation(cT, c.worldTransform);
  //     mat4.getRotation(cR, c.worldTransform);
  //     mat4.getScaling(dS, d.worldTransform);
  //     mat4.getTranslation(dT, d.worldTransform);
  //     mat4.getRotation(dR, d.worldTransform);
  //     vec3.catmullRom(this.localTranslation, aT, bT, cT, dT, t);
  //     vec3.catmullRom(R, aR, bR, cR, dR, t);
  //     quat.normalize(this.localRotation, R);
  //     vec3.catmullRom(this.localScale, aS, bS, cS, dS, t);
  //   };
  // })();
  function TransformComponent(data) {
    var _this;

    (0, _classCallCheck2.default)(this, TransformComponent);
    _this = _super.call(this, data);
    _this.dirtyFlag = void 0;
    _this.localTranslation = _glMatrix.vec3.fromValues(0, 0, 0);
    _this.localRotation = _glMatrix.quat.fromValues(0, 0, 0, 1);
    _this.localScale = _glMatrix.vec3.fromValues(1, 1, 1);
    _this.localTransform = _glMatrix.mat4.create();
    _this.worldTransform = _glMatrix.mat4.create();

    _this.getRotation = function () {
      var rotation = _glMatrix.quat.create();

      return function () {
        _glMatrix.mat4.getRotation(rotation, _this.worldTransform);

        return rotation;
      };
    }();

    _this.getScale = function () {
      var scaling = _glMatrix.vec3.create();

      return function () {
        _glMatrix.mat4.getScaling(scaling, _this.worldTransform);

        return scaling;
      };
    }();

    _this.getPosition = function () {
      var translation = _glMatrix.vec3.create();

      return function () {
        _glMatrix.mat4.getTranslation(translation, _this.worldTransform);

        return translation;
      };
    }();

    _this.getLocalMatrix = function () {
      var rts = _glMatrix.mat4.create();

      return function () {
        _glMatrix.mat4.fromRotationTranslationScale(rts, _this.localRotation, _this.localTranslation, _this.localScale);

        return rts;
      };
    }();

    _this.matrixTransform = function () {
      var transformed = _glMatrix.mat4.create();

      return function (mat) {
        _glMatrix.mat4.multiply(transformed, _this.getLocalMatrix(), mat);

        _glMatrix.mat4.getScaling(_this.localScale, transformed);

        _glMatrix.mat4.getTranslation(_this.localTranslation, transformed);

        _glMatrix.mat4.getRotation(_this.localRotation, transformed);
      };
    }();

    _this.rotateRollPitchYaw = function () {
      var quatX = _glMatrix.quat.create();

      var quatY = _glMatrix.quat.create();

      var quatZ = _glMatrix.quat.create();

      return function (x, y, z) {
        _this.setDirty();

        _glMatrix.quat.fromEuler(quatX, x, 0, 0);

        _glMatrix.quat.fromEuler(quatY, 0, y, 0);

        _glMatrix.quat.fromEuler(quatZ, 0, 0, z);

        _glMatrix.quat.multiply(_this.localRotation, quatX, _this.localRotation);

        _glMatrix.quat.multiply(_this.localRotation, _this.localRotation, quatY);

        _glMatrix.quat.multiply(_this.localRotation, quatZ, _this.localRotation);

        _glMatrix.quat.normalize(_this.localRotation, _this.localRotation);
      };
    }();

    _this.lerp = function () {
      var aS = _glMatrix.vec3.create();

      var aR = _glMatrix.quat.create();

      var aT = _glMatrix.vec3.create();

      var bS = _glMatrix.vec3.create();

      var bR = _glMatrix.quat.create();

      var bT = _glMatrix.vec3.create();

      return function (a, b, t) {
        _this.setDirty();

        _glMatrix.mat4.getScaling(aS, a.worldTransform);

        _glMatrix.mat4.getTranslation(aT, a.worldTransform);

        _glMatrix.mat4.getRotation(aR, a.worldTransform);

        _glMatrix.mat4.getScaling(bS, b.worldTransform);

        _glMatrix.mat4.getTranslation(bT, b.worldTransform);

        _glMatrix.mat4.getRotation(bR, b.worldTransform);

        _glMatrix.vec3.lerp(_this.localScale, aS, bS, t);

        _glMatrix.quat.slerp(_this.localRotation, aR, bR, t);

        _glMatrix.vec3.lerp(_this.localTranslation, aT, bT, t);
      };
    }();

    return _this;
  }

  (0, _createClass2.default)(TransformComponent, [{
    key: "isDirty",
    value: function isDirty() {
      return this.dirtyFlag;
    }
  }, {
    key: "setDirty",
    value: function setDirty() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (value) {
        this.dirtyFlag |= TransformComponent.DIRTY;
      } else {
        this.dirtyFlag &= ~TransformComponent.DIRTY;
      }
    }
  }, {
    key: "updateTransform",
    value: function updateTransform() {
      if (this.isDirty()) {
        this.setDirty(false);

        _glMatrix.mat4.copy(this.worldTransform, this.getLocalMatrix());
      }
    }
  }, {
    key: "updateTransformWithParent",
    value: function updateTransformWithParent(parent) {
      _glMatrix.mat4.multiply(this.worldTransform, this.getLocalMatrix(), parent.worldTransform);
    }
  }, {
    key: "applyTransform",
    value: function applyTransform() {
      this.setDirty();

      _glMatrix.mat4.getScaling(this.localScale, this.worldTransform);

      _glMatrix.mat4.getTranslation(this.localTranslation, this.worldTransform);

      _glMatrix.mat4.getRotation(this.localRotation, this.worldTransform);
    }
  }, {
    key: "clearTransform",
    value: function clearTransform() {
      this.setDirty();
      this.localTranslation = _glMatrix.vec3.fromValues(0, 0, 0);
      this.localRotation = _glMatrix.quat.fromValues(0, 0, 0, 1);
      this.localScale = _glMatrix.vec3.fromValues(1, 1, 1);
    }
    /**
     * TODO: 支持以下两种：
     * * translate(x, y, z)
     * * translate(vec3(x, y, z))
     */

  }, {
    key: "translate",
    value: function translate(translation) {
      this.setDirty();

      _glMatrix.vec3.add(this.localTranslation, this.localTranslation, translation);

      return this;
    }
  }, {
    key: "scale",
    value: function scale(scaling) {
      this.setDirty();

      _glMatrix.vec3.multiply(this.localScale, this.localScale, scaling);

      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(quaternion) {
      this.setDirty();

      _glMatrix.quat.multiply(this.localRotation, this.localRotation, quaternion);

      _glMatrix.quat.normalize(this.localRotation, this.localRotation);

      return this;
    }
  }]);
  return TransformComponent;
}(_ComponentManager.Component);

exports.TransformComponent = TransformComponent;
TransformComponent.DIRTY = 1 << 0;
//# sourceMappingURL=TransformComponent.js.map